2.0.6
=====
- Fixed "Message Resolver has not been initialized" error when more than one message resolver was configured
  for the same template engine.
- Fixed ClassCastException executing #{...} expressions in XML and VALIDXML template modes, because of a
  wrong construction of parsable code fragments (NestableNode was expected where there was a Text).
  

2.0.5
=====
- Added template name, line number and column to SAXParseExceptions in AbstractNonValidatingSAXTemplateParser.
- Fixed attribute escaping in builtin DOM parser.
- Fixed XML-escaping of ' (apos) in element attributes. "&apos;" is not a recognized HTML entity (only an XML one)
  and IE <= 8 does not recognize it. &#39; will be used for escaping ' instead.
- Fixed unescaping of XML entities in element attributes, so that those specified with codes (&#XX;) are also
  correctly unescaped.
- Added to link expressions (@{...}) the ability to create server-root-relative (instead of context-root-relative)
  URLs in order to link to different contexts in the same server. These URLs will be specified like 
  @{~/path/to/something}
- Fixed javascript/dart expression inlining in order to work inside JSON objects. 


2.0.4
=====
- Fixed element attributes not being XML-unescaped at SAX parser.


2.0.3
=====
- Fixed selection target not being correctly processed when th:object and th:remove="tag" appeared
  at the same host tag.
- Allow parameters in @{...} expressions to specify no value, and even no '=' sign. As per the HTTP
  specification, these parameters are valid and completely equivalent to specifying the empty string
  as value.
- Fixed excessive size of parser pools being created at Google App Engine for the standard template 
  mode handler set (availableProcessors is set to 1377 in that environment).
- Fixed attribute values resulting from the execution of processors in the Standard Dialects not being
  correctly XML-escaped.


2.0.2
=====
- Fixed NullPointerException when getting message for class.
- Worked around ArrayIndexOutOfBounds when executing #messages.* functions in OGNL (not SpringEL)
  due to bug in OGNL implementation.


2.0.1
=====
- Fixed exception at SAX parser when comments appear at document-root level.
- Fixed template name at exception reports when including fragments (the top-level template name
  was appearing instead of the fragment's).
- Fixed attribute management so that null-valued attributes are allowed and output as "".
- Fixed Java6-specific code which disallowed Thymeleaf to compile and run correctly in Java 5.
- Modified the "display if null" flag of th:value from false to true, in order to avoid problems with
  parts of the framework (esp. form-binding relative) that require a "value" attribute in
  <option> tags.
- Fixed incorrect exception messages.


2.0.0
=====
- Added th:switch/th:case attributes to the standard dialects, working in a way equivalent
  to that of the Java "switch" structure (default --> th:case="*").
- Created version "3" of the standard DTDs for XHTML template validation, including the
  new th:switch and th:case attributes. 
- Substituted the Java standard DOM API (org.w3c.dom.*) by Thymeleaf's own tailor-made
  DOM representation (org.thymeleaf.dom)
- Created a DOM precomputation system that allows caching some information about the processors
  that are applicable to each node in the tree, so that this information does not always
  have to be computed during cached template execution.
- Renamed "Tag Processors" as "Element Processors" in order to keep coherence with DOM.
- Refactored Processor system: generalized "Attribute Processors" and "Element Processors"
  by creating the IProcessor interface, This interface will be implemented by any processor 
  object of any kind (which can now apply of any type of DOM node, and not only Elements). 
  "Attribute Processors" and "Element Processors" are now specializations of IProcessors.
- Redefined ITextInliner objects (text, javascript, dart inliners) as Processors for
  Text and CDATASection nodes. Inlining is now a Standard-Dialect feature and not a Thymeleaf
  core engine one.
- Template modes have been generalized, along with template parsers and output creation 
  infrastructure. Instead of the previous fixed set of template modes (XML, VALIDXML, XHTML, 
  VALIDXML, HTML5 and LEGACYHTML5), now any number of template modes can be configured at the
  Template Engine as long as an implementation of ITemplateModeHandler is provided for each of
  them (by default, the old ones are provided out-of-the-box). This "Template Mode Handlers" specify 
  the parser (implementation of ITemplateParser) to be used for templates using this mode 
  (template -> DOM) and also the writer (implementation of ITemplateWriter) to be used for writing 
  the results of processing (DOM -> result). This effectively allows Thymeleaf to process any kind 
  of template --and not only XML/XHTML/HTML-- as long as these templates can be somehow converted 
  to and from a DOM representation.
- Created a new SAX parser implementation of ITemplateParser, now used by default for reading templates
  in all template modes except LEGACYHTML5 (which requires previous tag balancing by nekoHTML).
- Added position information to DOM nodes, so that template execution errors now display along with
  the number of the line in the template where they occur.
- Cache infrastructure has been generalized. The ICacheManager interface now allows the specification
  of tailor-made implementations for template, fragment, message and expression caches. All of these
  caches now implement a new interface called ICache.
- Reimplemented the standard (default) cache strategies for templates, fragments, messages and 
  expressions based on ConcurrentHashMaps.
- Adapted the parsing and DOM handling infrastructure in order to enable Thymeleaf to process fragmentary
  templates instead of complete documents. For example, no DOCTYPE or document root is now required
  (template could be just a '<div>' block, for instance).
- Removed the old IApplicability class hierarchy and substituted by a much simpler
  IProcessorMatcher interface and a set of simple implementations for matching a processor
  by element name, attribute name, etc.
- Created the TemplateProcessingParameters class containing all the info available for the
  processing of the template before its resolution and parsing.
- Made Arguments objects include the corresponding TemplateResolution object created after
  resolving and parsing the template. Arguments is still immutable, so this means that
  the Arguments object used at the Processors is now created after template resolution and
  parsing. 
- Modified IResourceResolver interface so that Resource Resolver objects now receive a
  TemplateProcessingParameters object instead of an Arguments one.
- Modified ITemplateResolver interface so that Template Resolver objects now receive a
  TemplateProcessingParameters object instead of an Arguments one.
- Created org.thymeleaf.TemplateRepository for processing obtention of the parsed templates and 
  parsable fragments by applying the cache (if it exists).
- Added a new "all-but-first" value to "th:remove" that removes all children tags
  except the first one.
- Downgraded the XPath support in th:include attributes by substituting full XPath support by more 
  efficient DOMSelector objects that can be created by using a subset of the XPath syntax: '//', 
  '/', indexes and attribute specification.
- Optimized use of Collections and Maps wherever possible.
- Updated documentation and example applications
  
  
1.1.5
=====
- Fixed bug related to template reading through the entity-substitution filter
  (ArrayIndexOutOfBounds).
- Modified javascript inlining of Enums so that no properties other than "$type" and "$name"
  are output. This avoids problems with typical static and member fields containing
  all the values of an enum and thus provoking stack overflow errors when performing inlining.
- Modified TIMER logger for outputting execution times in nanoseconds and milliseconds (instead 
  of only milliseconds).  
  
  
1.1.4
=====
- Solved bug regarding the initialization of expression utility objects that prevented
  the "#object" variable to change accordingly when a th:object attribute was specified,
  thus raising an exception when executing valid expressions on it.


1.1.3
=====
- Modified WebContext constructors so that they require now the ServletContext 
  object. This enables Thymeleaf to operate without depending at all
  on creating an HTTP session object for the user executing the template.
- Modified TemplateProcessingException exception hierarchy in order to include
  template information and (future) location data.
- Created org.thymeleaf.util.CacheMap generic cache class and refactored all other
  caches throughout the library to use this class. Also, a new logger called
  org.thymeleaf.TemplateEngine.CACHE has been declared for this class.
- Refactored Parsed Template Cache as an org.thymeleaf.util.CacheMap object, and
  removed "org.thymeleaf.TemplateEngine.PARSERCACHE" specific logger 
  (org.thymeleaf.TemplateEngine.CACHE should be used instead).


1.1.2
=====
- Minor fixing in StandardTextInliner for empty Text nodes.
- Fixed DOMDocumentProcessor and Tag/Attribute applicabilities so that execution of
  a Thymeleaf template is now case-insensitive.
- Modifications to the LEGACYHTML5 parsing system. Substituted HtmlCleaner by
  nekoHTML as a tag-balancing library.
- Fixed bug in HTMLTemplateReader provoking incomplete reads of templates resolved
  from a remote URL.
- Minor fixes to HTMLTemplateReader to avoid parsing exceptions in some uncommon
  scenarios.
- Class org.thymeleaf.utils.FragmentUtils renamed as org.thymeleaf.utils.DOMUtils
- Added utility method #numbers.sequence(x,y) returning an array with a sequence
  of integer numbers going from x to y, useful for creating th:each expressions for
  a fixed number of iterations.
- Added #httpServletRequest and #httpSession objects to expression evaluations,
  representing the HttpServletRequest and HttpSession objects related to a WebContext,
  respectively.
- Added javascript representation for enums in javascript inlining, and fixed
  infinite loop happening when inlining them. Enums are now represented in
  javascript as objects with at least two properties called "$type" and "$name" 
  (respectively, the enum class name --without package-- and the enum constant name).
- Solved bug that raised an IllegalArgumentException when an internationalization
  message was not found (only when used without Spring).
- Added "dart" inlining method for Dart language.
- Added "create*" methods to Calendars (#calendars) and Dates (#dates) for creating 
  Calendar or Date objects from its components: year, month, day, hour, minute, etc.
- Added "create*" methods to Calendars (#calendars) and Dates (#dates) for creating 
  Calendar or Date objects for the current date ("today") and the current date+time
  ("now").
- Modified equality (==) and inequality (!=) expression operators so that they first
  query the "compareTo(...)" method if both objects being compared implement Comparable.
- Added new methods to expression utility class "Strings" (#strings): "capitalize",
  "capitalizeWords", "unCapitalize"



1.1.1
=====
- Fixed: avoid non-minimizable tags like <script>, <textarea>, <div>, etc. to be
  minimized (appear as <script />, <textarea />, div /> without an end tag).


1.1.0
=====
- Modified condition evaluation: now the Strings "false", "no" and "off" return false.
- Deprecated IValueProcessor interface and related all infrastructure.
- New Standard Expression evaluation system, based on static methods from the 
  org.thymeleaf.standard.expression.StandardExpressionProcessor class instead of the
  StandardValueProcessor from Thymeleaf 1.0.x.
- Added new features to Standard Expression syntax:
    * Numeric literals: 1, 32, 42.3, 11.34, etc.
    * Unary operators: ! (boolean negation), - (numeric minus sign)
    * String operators: + (String concatenation)
    * Numeric binary operators and comparators: +, -, *, /, %, >, <, >=,<=  
    * Boolean binary operators: and, or
    * Equality checks: ==, !=
- Added "hour", "minute", "second" and "millisecond" functions to expression utility
  objects "#dates" and "#calendars".
- Created new "th:substituteby" attribute, equivalent to "th:include" but actually 
  substituting its host tag by the fragment's.
- Created new versions (v2) of the set of thymeleaf-specific XHTML DTDs, including the new
  "th:substituteby" attribute:
    * http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-2.dtd
    * http://www.thymeleaf.org/dtd/xhtml1-transitional-thymeleaf-2.dtd
    * http://www.thymeleaf.org/dtd/xhtml1-frameset-thymeleaf-2.dtd
    * http://www.thymeleaf.org/dtd/xhtml11-thymeleaf-2.dtd
- Fixed: children nodes not being correctly removed from th:text and th:utext.
- Modified input parsing system to avoid substitution of XML/XHTML/HTML5 entities
  like "&nbsp;", "&euro;", "&pound;", etc. by their corresponding characters. Now
  these entities are transmitted to the template engine output directly without
  substitution.
- Substituted the TemplateEngine.THYMELEAF_NON_EXECUTABLE_NODE constant (used as
  user data in DOM Nodes for avoiding their execution) by static methods for controlling
  node execution in the org.thymeleaf.DOMExecution class.
- Performance optimization: added a scanning step prior to storing a template into 
  the cache that will detect all DOM nodes (and entire node trees) that should not 
  be executed (because there is no processor applicable to them) and mark these 
  nodes so that they are not queried at all during normal template execution.
- Fixed: allow comments between DOCTYPE and root element node.
    

1.0.1
=====
- Fixed: URLs containing a fragment selector (http://url#fragment) were not correctly recognized
  by link expressions in standard syntax (@{...}).
- Modification on parsed template cache system: now based on SoftReferences, making it memory-sensitive.
  Before throwing an OutOfMemoryException, the garbage collector is now allowed to avoid it by cleaning
  any existing cache entries. In such case, a warning will be issued via the log system noticing a 
  possible bad configuration in cache size and/or JVM heap size. 
- Fixed: "last" property in iteration status variables returned always true.


1.0.0
=====
- Modified th:attr so that attributes resulting in empty values are removed (removeIfEmpty = true).


1.0.0-beta5
===========
- Fixed bug regarding case-sensitivity of dialect and attribute names/processors.
- Added hierarchy of abstract classes for tag processors.
- Added "msgOrNull", "arrayMsgOrNull", "listMsgOrNull" and "setMsgOrNull" methods to the
  #messages expression utility object, so that a null can be returned if the desired message
  is not found (instead of a default message).
- Refactored org.thymeleaf.templateresolver.TemplateResolver and created abstract class
  org.thymeleaf.templateresolver.AbstractTemplateResolver.
- Substituted "cacheable" flag and "cacheTTLMs" property in TemplateResolution by
  ITemplateResolutionValidity objects, which can implement more complex strategies for defining
  when a template must be considered cacheable, and when its cache entry can still be considered
  valid.


1.0.0-beta4
===========
- Added support for externalized "processor messages", messages that will be accompanying
  not the template/s, but the tag/attribute processors themselves, so that they can be
  referred wherever those processors are used (and packaged along with them into a .jar
  file in order to create "UI components").
- Added the "getMessageForTemplate(...)" method to AbstractAttrProcessor and
  AbstractTagProcessor for easier resolution of template messages from tag/attribute
  processors.
- Added the "getMessageForProcessor(...)" method to AbstractAttrProcessor and
  AbstractTagProcessor for easier resolution of processor messages from tag/attribute
  processors.
- Added the "getMessage(...)" method to AbstractAttrProcessor and AbstractTagProcessor
  for trying to resolve messages as "template messages" first and then (if not found) as
  "processor messages".


1.0.0-beta3
===========
- ADDED MULTI-DIALECT SUPPORT. TemplateEngines can now be specified several dialects to 
  be applied at the same time for template processing. Each of these dialects can have 
  different prefix (it is also allowed that several dialects can have the same prefix).
- Added the possibility of including expressions in "th:include" attributes.
- Added cache TTL configuration to TemplateResolver (templateResolver.setCacheTTLMs(Long)).
- Refactored pattern system in TemplateResolver and subclasses.
- Avoid URLs with "jsessionid" to be cached to avoid the possibility of filling the cache
  with the same template resolved for many session IDs. 
- Add "resolvable patterns" to TemplateResolver so that template resolvers can 
  quickly determine that a template is not resolvable by them (without needing resource
  resolution).
- Added "execInfo" bean to expression evaluation, containing the current timestamp and
  the template name.
- Cache parsed values in Standard syntax for better template execution performance.
- Improved JAVADOC documentation. 


1.0.0-beta2
===========
- Added UrlResourceResolver for resolving resources as URLs (including remote URLs)
- Added UrlTemplateResolver for resolving templates as URLs (including remote URLs)
- Modified th:include syntax from "fragment@template" to "template::fragment"
- Added the possibility to include complete templates as fragments with th:include when
  a fragment is not specified
- Added the possibility to include the result of executing XPath expressions on templates as 
  fragments with th:include with the "template::[xpathexpr]" syntax
- Added methods in TemplateEngine to clear the template cache (selectively or not):
  templateEngine.clearParsedTemplateCache() and templateEngine.clearParsedTemplateCacheFor(templateName)


1.0.0-beta1
===========
- First release of thymeleaf
